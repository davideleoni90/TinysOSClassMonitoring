/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SensorsDataMsg'
 * message type.
 */

public class SensorsDataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 24;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 30;

    /** Create a new SensorsDataMsg of size 24. */
    public SensorsDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SensorsDataMsg of the given data_length. */
    public SensorsDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorsDataMsg with the given data_length
     * and base offset.
     */
    public SensorsDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorsDataMsg using the given byte array
     * as backing store.
     */
    public SensorsDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorsDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SensorsDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorsDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SensorsDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorsDataMsg embedded in the given message
     * at the given base offset.
     */
    public SensorsDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorsDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public SensorsDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SensorsDataMsg> \n";
      try {
        s += "  [x_acceleration=0x"+Long.toHexString(get_x_acceleration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [y_acceleration=0x"+Long.toHexString(get_y_acceleration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [z_acceleration=0x"+Long.toHexString(get_z_acceleration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [message_path=";
        for (int i = 0; i < 4; i++) {
          s += "0x"+Long.toHexString(getElement_message_path(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hopcount=0x"+Long.toHexString(get_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [origin=0x"+Long.toHexString(get_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [quality=0x"+Long.toHexString(get_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [link_path_value=0x"+Long.toHexString(get_link_path_value())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [link_path_addr=0x"+Long.toHexString(get_link_path_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: x_acceleration
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'x_acceleration' is signed (false).
     */
    public static boolean isSigned_x_acceleration() {
        return false;
    }

    /**
     * Return whether the field 'x_acceleration' is an array (false).
     */
    public static boolean isArray_x_acceleration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'x_acceleration'
     */
    public static int offset_x_acceleration() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'x_acceleration'
     */
    public static int offsetBits_x_acceleration() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'x_acceleration'
     */
    public short get_x_acceleration() {
        return (short)getSIntBEElement(offsetBits_x_acceleration(), 16);
    }

    /**
     * Set the value of the field 'x_acceleration'
     */
    public void set_x_acceleration(short value) {
        setSIntBEElement(offsetBits_x_acceleration(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'x_acceleration'
     */
    public static int size_x_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'x_acceleration'
     */
    public static int sizeBits_x_acceleration() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: y_acceleration
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'y_acceleration' is signed (false).
     */
    public static boolean isSigned_y_acceleration() {
        return false;
    }

    /**
     * Return whether the field 'y_acceleration' is an array (false).
     */
    public static boolean isArray_y_acceleration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'y_acceleration'
     */
    public static int offset_y_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'y_acceleration'
     */
    public static int offsetBits_y_acceleration() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'y_acceleration'
     */
    public short get_y_acceleration() {
        return (short)getSIntBEElement(offsetBits_y_acceleration(), 16);
    }

    /**
     * Set the value of the field 'y_acceleration'
     */
    public void set_y_acceleration(short value) {
        setSIntBEElement(offsetBits_y_acceleration(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'y_acceleration'
     */
    public static int size_y_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'y_acceleration'
     */
    public static int sizeBits_y_acceleration() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: z_acceleration
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'z_acceleration' is signed (false).
     */
    public static boolean isSigned_z_acceleration() {
        return false;
    }

    /**
     * Return whether the field 'z_acceleration' is an array (false).
     */
    public static boolean isArray_z_acceleration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'z_acceleration'
     */
    public static int offset_z_acceleration() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'z_acceleration'
     */
    public static int offsetBits_z_acceleration() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'z_acceleration'
     */
    public short get_z_acceleration() {
        return (short)getSIntBEElement(offsetBits_z_acceleration(), 16);
    }

    /**
     * Set the value of the field 'z_acceleration'
     */
    public void set_z_acceleration(short value) {
        setSIntBEElement(offsetBits_z_acceleration(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'z_acceleration'
     */
    public static int size_z_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'z_acceleration'
     */
    public static int sizeBits_z_acceleration() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: message_path
    //   Field type: int[], unsigned
    //   Offset (bits): 48
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'message_path' is signed (false).
     */
    public static boolean isSigned_message_path() {
        return false;
    }

    /**
     * Return whether the field 'message_path' is an array (true).
     */
    public static boolean isArray_message_path() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'message_path'
     */
    public static int offset_message_path(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'message_path'
     */
    public static int offsetBits_message_path(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'message_path' as a int[]
     */
    public int[] get_message_path() {
        int[] tmp = new int[4];
        for (int index0 = 0; index0 < numElements_message_path(0); index0++) {
            tmp[index0] = getElement_message_path(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'message_path' from the given int[]
     */
    public void set_message_path(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_message_path(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'message_path'
     */
    public int getElement_message_path(int index1) {
        return (int)getUIntBEElement(offsetBits_message_path(index1), 16);
    }

    /**
     * Set an element of the array 'message_path'
     */
    public void setElement_message_path(int index1, int value) {
        setUIntBEElement(offsetBits_message_path(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'message_path'
     */
    public static int totalSize_message_path() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'message_path'
     */
    public static int totalSizeBits_message_path() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'message_path'
     */
    public static int elementSize_message_path() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'message_path'
     */
    public static int elementSizeBits_message_path() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'message_path'
     */
    public static int numDimensions_message_path() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'message_path'
     */
    public static int numElements_message_path() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'message_path'
     * for the given dimension.
     */
    public static int numElements_message_path(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hopcount
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hopcount' is signed (false).
     */
    public static boolean isSigned_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'hopcount' is an array (false).
     */
    public static boolean isArray_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hopcount'
     */
    public static int offset_hopcount() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hopcount'
     */
    public static int offsetBits_hopcount() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'hopcount'
     */
    public int get_hopcount() {
        return (int)getUIntBEElement(offsetBits_hopcount(), 16);
    }

    /**
     * Set the value of the field 'hopcount'
     */
    public void set_hopcount(int value) {
        setUIntBEElement(offsetBits_hopcount(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hopcount'
     */
    public static int size_hopcount() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hopcount'
     */
    public static int sizeBits_hopcount() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: origin
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'origin' is signed (false).
     */
    public static boolean isSigned_origin() {
        return false;
    }

    /**
     * Return whether the field 'origin' is an array (false).
     */
    public static boolean isArray_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'origin'
     */
    public static int offset_origin() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'origin'
     */
    public static int offsetBits_origin() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'origin'
     */
    public int get_origin() {
        return (int)getUIntBEElement(offsetBits_origin(), 16);
    }

    /**
     * Set the value of the field 'origin'
     */
    public void set_origin(int value) {
        setUIntBEElement(offsetBits_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'origin'
     */
    public static int size_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'origin'
     */
    public static int sizeBits_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: quality
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'quality' is signed (false).
     */
    public static boolean isSigned_quality() {
        return false;
    }

    /**
     * Return whether the field 'quality' is an array (false).
     */
    public static boolean isArray_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'quality'
     */
    public static int offset_quality() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'quality'
     */
    public static int offsetBits_quality() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'quality'
     */
    public int get_quality() {
        return (int)getUIntBEElement(offsetBits_quality(), 16);
    }

    /**
     * Set the value of the field 'quality'
     */
    public void set_quality(int value) {
        setUIntBEElement(offsetBits_quality(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'quality'
     */
    public static int size_quality() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'quality'
     */
    public static int sizeBits_quality() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: link_path_value
    //   Field type: int, unsigned
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'link_path_value' is signed (false).
     */
    public static boolean isSigned_link_path_value() {
        return false;
    }

    /**
     * Return whether the field 'link_path_value' is an array (false).
     */
    public static boolean isArray_link_path_value() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'link_path_value'
     */
    public static int offset_link_path_value() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'link_path_value'
     */
    public static int offsetBits_link_path_value() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'link_path_value'
     */
    public int get_link_path_value() {
        return (int)getUIntBEElement(offsetBits_link_path_value(), 16);
    }

    /**
     * Set the value of the field 'link_path_value'
     */
    public void set_link_path_value(int value) {
        setUIntBEElement(offsetBits_link_path_value(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'link_path_value'
     */
    public static int size_link_path_value() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'link_path_value'
     */
    public static int sizeBits_link_path_value() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: link_path_addr
    //   Field type: int, unsigned
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'link_path_addr' is signed (false).
     */
    public static boolean isSigned_link_path_addr() {
        return false;
    }

    /**
     * Return whether the field 'link_path_addr' is an array (false).
     */
    public static boolean isArray_link_path_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'link_path_addr'
     */
    public static int offset_link_path_addr() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'link_path_addr'
     */
    public static int offsetBits_link_path_addr() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'link_path_addr'
     */
    public int get_link_path_addr() {
        return (int)getUIntBEElement(offsetBits_link_path_addr(), 16);
    }

    /**
     * Set the value of the field 'link_path_addr'
     */
    public void set_link_path_addr(int value) {
        setUIntBEElement(offsetBits_link_path_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'link_path_addr'
     */
    public static int size_link_path_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'link_path_addr'
     */
    public static int sizeBits_link_path_addr() {
        return 16;
    }

}
