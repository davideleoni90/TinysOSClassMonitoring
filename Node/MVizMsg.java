/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MVizMsg'
 * message type.
 */

public class MVizMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 30;

    /** Create a new MVizMsg of size 14. */
    public MVizMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MVizMsg of the given data_length. */
    public MVizMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg with the given data_length
     * and base offset.
     */
    public MVizMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg using the given byte array
     * as backing store.
     */
    public MVizMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public MVizMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MVizMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg embedded in the given message
     * at the given base offset.
     */
    public MVizMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg embedded in the given message
     * at the given base offset and length.
     */
    public MVizMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MVizMsg> \n";
      try {
        s += "  [x_acceleration=0x"+Long.toHexString(get_x_acceleration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [y_acceleration=0x"+Long.toHexString(get_y_acceleration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [z_acceleration=0x"+Long.toHexString(get_z_acceleration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [origin=0x"+Long.toHexString(get_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [quality=0x"+Long.toHexString(get_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [link_path_value=0x"+Long.toHexString(get_link_path_value())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [link_path_addr=0x"+Long.toHexString(get_link_path_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: x_acceleration
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'x_acceleration' is signed (false).
     */
    public static boolean isSigned_x_acceleration() {
        return false;
    }

    /**
     * Return whether the field 'x_acceleration' is an array (false).
     */
    public static boolean isArray_x_acceleration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'x_acceleration'
     */
    public static int offset_x_acceleration() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'x_acceleration'
     */
    public static int offsetBits_x_acceleration() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'x_acceleration'
     */
    public short get_x_acceleration() {
        return (short)getSIntBEElement(offsetBits_x_acceleration(), 16);
    }

    /**
     * Set the value of the field 'x_acceleration'
     */
    public void set_x_acceleration(short value) {
        setSIntBEElement(offsetBits_x_acceleration(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'x_acceleration'
     */
    public static int size_x_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'x_acceleration'
     */
    public static int sizeBits_x_acceleration() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: y_acceleration
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'y_acceleration' is signed (false).
     */
    public static boolean isSigned_y_acceleration() {
        return false;
    }

    /**
     * Return whether the field 'y_acceleration' is an array (false).
     */
    public static boolean isArray_y_acceleration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'y_acceleration'
     */
    public static int offset_y_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'y_acceleration'
     */
    public static int offsetBits_y_acceleration() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'y_acceleration'
     */
    public short get_y_acceleration() {
        return (short)getSIntBEElement(offsetBits_y_acceleration(), 16);
    }

    /**
     * Set the value of the field 'y_acceleration'
     */
    public void set_y_acceleration(short value) {
        setSIntBEElement(offsetBits_y_acceleration(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'y_acceleration'
     */
    public static int size_y_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'y_acceleration'
     */
    public static int sizeBits_y_acceleration() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: z_acceleration
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'z_acceleration' is signed (false).
     */
    public static boolean isSigned_z_acceleration() {
        return false;
    }

    /**
     * Return whether the field 'z_acceleration' is an array (false).
     */
    public static boolean isArray_z_acceleration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'z_acceleration'
     */
    public static int offset_z_acceleration() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'z_acceleration'
     */
    public static int offsetBits_z_acceleration() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'z_acceleration'
     */
    public short get_z_acceleration() {
        return (short)getSIntBEElement(offsetBits_z_acceleration(), 16);
    }

    /**
     * Set the value of the field 'z_acceleration'
     */
    public void set_z_acceleration(short value) {
        setSIntBEElement(offsetBits_z_acceleration(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'z_acceleration'
     */
    public static int size_z_acceleration() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'z_acceleration'
     */
    public static int sizeBits_z_acceleration() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: origin
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'origin' is signed (false).
     */
    public static boolean isSigned_origin() {
        return false;
    }

    /**
     * Return whether the field 'origin' is an array (false).
     */
    public static boolean isArray_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'origin'
     */
    public static int offset_origin() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'origin'
     */
    public static int offsetBits_origin() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'origin'
     */
    public int get_origin() {
        return (int)getUIntBEElement(offsetBits_origin(), 16);
    }

    /**
     * Set the value of the field 'origin'
     */
    public void set_origin(int value) {
        setUIntBEElement(offsetBits_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'origin'
     */
    public static int size_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'origin'
     */
    public static int sizeBits_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: quality
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'quality' is signed (false).
     */
    public static boolean isSigned_quality() {
        return false;
    }

    /**
     * Return whether the field 'quality' is an array (false).
     */
    public static boolean isArray_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'quality'
     */
    public static int offset_quality() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'quality'
     */
    public static int offsetBits_quality() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'quality'
     */
    public int get_quality() {
        return (int)getUIntBEElement(offsetBits_quality(), 16);
    }

    /**
     * Set the value of the field 'quality'
     */
    public void set_quality(int value) {
        setUIntBEElement(offsetBits_quality(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'quality'
     */
    public static int size_quality() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'quality'
     */
    public static int sizeBits_quality() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: link_path_value
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'link_path_value' is signed (false).
     */
    public static boolean isSigned_link_path_value() {
        return false;
    }

    /**
     * Return whether the field 'link_path_value' is an array (false).
     */
    public static boolean isArray_link_path_value() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'link_path_value'
     */
    public static int offset_link_path_value() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'link_path_value'
     */
    public static int offsetBits_link_path_value() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'link_path_value'
     */
    public int get_link_path_value() {
        return (int)getUIntBEElement(offsetBits_link_path_value(), 16);
    }

    /**
     * Set the value of the field 'link_path_value'
     */
    public void set_link_path_value(int value) {
        setUIntBEElement(offsetBits_link_path_value(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'link_path_value'
     */
    public static int size_link_path_value() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'link_path_value'
     */
    public static int sizeBits_link_path_value() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: link_path_addr
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'link_path_addr' is signed (false).
     */
    public static boolean isSigned_link_path_addr() {
        return false;
    }

    /**
     * Return whether the field 'link_path_addr' is an array (false).
     */
    public static boolean isArray_link_path_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'link_path_addr'
     */
    public static int offset_link_path_addr() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'link_path_addr'
     */
    public static int offsetBits_link_path_addr() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'link_path_addr'
     */
    public int get_link_path_addr() {
        return (int)getUIntBEElement(offsetBits_link_path_addr(), 16);
    }

    /**
     * Set the value of the field 'link_path_addr'
     */
    public void set_link_path_addr(int value) {
        setUIntBEElement(offsetBits_link_path_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'link_path_addr'
     */
    public static int size_link_path_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'link_path_addr'
     */
    public static int sizeBits_link_path_addr() {
        return 16;
    }

}
