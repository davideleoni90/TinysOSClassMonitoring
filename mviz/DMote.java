/* * Copyright (c) 2006 Stanford University. * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * - Redistributions of source code must retain the above copyright *   notice, this list of conditions and the following disclaimer. * - Redistributions in binary form must reproduce the above copyright *   notice, this list of conditions and the following disclaimer in the *   documentation and/or other materials provided with the *   distribution. * - Neither the name of the Stanford University nor the names of *   its contributors may be used to endorse or promote products derived *   from this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL STANFORD * UNIVERSITY OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED * OF THE POSSIBILITY OF SUCH DAMAGE. */package net.tinyos.mviz;import java.awt.*;import java.awt.geom.Line2D;import sun.net.www.content.image.gif;/** * A DMote is a shape representing a mote or a host on the canvas *  * @author user *  */public class DMote extends DShape implements DMoteModelListener {	/**	 * The DDocument the canvas belongs to	 */	private DDocument document;	/**	 * The model of the mote itself or of the one to	 * which the host is connected	 */	private DMoteModel model;	/**	 * Constructor for motes and host: in the former case, the	 * given model refers to the mote itself, in the latter it	 * refers to the mote the host is connected to	 * @param model	 * @param document	 */	public DMote(DMoteModel model, DDocument document) {		super(model, document);		/**		 * Set the type		 */		this.document = document;		this.model=model;	}	static int counter = 0;	public void paintShape(Graphics g) {		int x = model.getLocX();		int y = model.getLocY();		Image img = model.getImage();		java.awt.MediaTracker tracker = new java.awt.MediaTracker(this);		tracker.addImage(img, 0);		try{			tracker.waitForID(0);		}		catch(InterruptedException e){			g.drawString("error loading image", 20, 20);		}		/**		 *If the mote is a producer one, draw the border of		 *the icon		 */				if(model.isProducer()){			g.setColor(Color.RED);			g.fillOval(x - 22, y - 22, 44, 44);		}				/**		 * If the mote is the root one, draw link to the host		 * and draw the host itself		 */				if(model.getId()==document.rootMote){			Graphics2D g2 = (Graphics2D) g;			g2.setStroke(new BasicStroke(2));			g2.setColor(Color.black);			g2.draw(new Line2D.Double(model.getLocX(),model.getLocY(), document.getHostX(), document.getHostY()));			Image hostImg =document.hostImage;			tracker = new java.awt.MediaTracker(this);			tracker.addImage(hostImg, 0);			try{				tracker.waitForID(0);			}			catch(InterruptedException e){				g2.drawString("error loading image", 20, 20);			}			g2.drawImage(hostImg, document.getHostX(),document.getHostY(), 40, 40, document.canvas);		}		g.drawImage(img, x - 20, y - 20, 40, 40, document.canvas);	}}